{"version":3,"file":"translation.js","sourceRoot":"","sources":["../../src/translations/translation.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AAGxC;;;GAGG;AAEH;;;;;;;GAOG;AACH,MAAM,UAAU,GAAG,CAAC,GAAW,EAAE,MAA+B;IAC9D,MAAM,QAAQ,GAAG,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC;IAC1D,MAAM,YAAY,GAAG,SAAS,CAAC,QAAoB,CAAC,IAAI,SAAS,CAAC,IAAI,CAAC,CAAC;IAExE,qFAAqF;IACrF,MAAM,IAAI,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAC5B,IAAI,MAAM,GAAQ,YAAY,CAAC;IAC/B,KAAK,MAAM,OAAO,IAAI,IAAI,EAAE,CAAC;QAC3B,IAAI,CAAC,MAAM;YAAE,OAAO,GAAG,CAAC;QACxB,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC;IAC3B,CAAC;IAED,IAAI,OAAO,MAAM,KAAK,QAAQ;QAAE,OAAO,GAAG,CAAC;IAE3C,uDAAuD;IACvD,IAAI,MAAM,EAAE,CAAC;QACX,OAAO,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAClC,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,MAAM,CAAC,SAAS,GAAG,QAAQ,EAAE,GAAG,CAAC,EAAE,KAAK,CAAC,EAChF,MAAM,CACP,CAAC;IACJ,CAAC;IAED,OAAO,MAAM,CAAC;AAChB,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,SAAS;IACvB,OAAO,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC;AAClD,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,uBAAuB,CAAC,OAAgB;IACtD,iCAAiC;AACnC,CAAC;AAED;;;;;GAKG;AACH,MAAM,UAAU,GAAG,CAAC,QAAgB;IAClC,qEAAqE;IACrE,2DAA2D;IAC3D,4EAA4E;IAC5E,sCAAsC;AACxC,CAAC","sourcesContent":["import { Language } from '../settings';\nimport { languages } from './loader.js';\nimport { Translations } from './loader.js';\n\n/**\n * Translation utility module that replaces lit-translate\n * Can be used as a drop-in replacement for lit-translate's functions\n */\n\n/**\n * Gets a translation string based on the current language.\n * This is a direct replacement for lit-translate's get function.\n *\n * @param key - The translation key (e.g., 'substation.missing')\n * @param params - Optional parameters for string interpolation (e.g., { name: 'value' })\n * @returns The translated string or the key itself if not found\n */\nexport function get(key: string, params?: Record<string, string>): string {\n  const language = navigator.language.split('-')[0] || 'en';\n  const translations = languages[language as Language] || languages['en'];\n\n  // Parse the key path (e.g., \"substation.missing\" -> translations.substation.missing)\n  const path = key.split('.');\n  let result: any = translations;\n  for (const segment of path) {\n    if (!result) return key;\n    result = result[segment];\n  }\n\n  if (typeof result !== 'string') return key;\n\n  // Handle parameter substitution if params are provided\n  if (params) {\n    return Object.entries(params).reduce<string>(\n      (str, [key, value]) => str.replace(new RegExp(`{{\\\\s*${key}\\\\s*}}`, 'g'), value),\n      result\n    );\n  }\n\n  return result;\n}\n\n/**\n * Returns the current language code\n *\n * @returns The current language code (e.g., 'en' or 'de')\n */\nexport function getLocale(): string {\n  return navigator.language.split('-')[0] || 'en';\n}\n\n/**\n * Empty implementation for backward compatibility\n * Replaces lit-translate's registerTranslateConfig\n */\nexport function registerTranslateConfig(_config: unknown): void {\n  // No-op - just for compatibility\n}\n\n/**\n * Sets the active language\n * Replaces lit-translate's use function\n *\n * @param language - Language code to use\n */\nexport function use(language: string): void {\n  // This functionality would be handled through the Settings component\n  // and localStorage. This is just a stub for compatibility.\n  // The actual language used is determined at runtime from navigator.language\n  // or localStorage in the get function\n}\n"]}